choose(6,3)*choose(6,1)*(5*4*3) +
choose(6,4)*choose(6,1)*(5*4)+
choose(6,5)*choose(6,1)*5+
choose(6,6)*choose(6,1)
N1
N2 = choose(6,2)*choose(4,2)*choose(6,2)*(4*3)+
choose(6,3)*choose(3,2)*choose(6,2)*4+
choose(6,3)*choose(3,3)*choose(6,2)+
choose(6,4)*choose(2,2)*choose(6,2)
N2
N3 = choose(6,2)*choose(4,2)*choose(2,2)*choose(6,3)
N3
6^6
N0+N1+N2+N3
choose(6,2)*choose(6,2)+choose(6,3)*choose(6,2)
N3
choose(6,2)*(6*5)+choose(6,3)*choose(6,2)
R2 = choose(6,2)*(6*5)+choose(6,3)*choose(6,2) + choose(6,1)*(6*5)
R2
R2 = choose(6,2)*(choose(6,1) + choose(6,2) + choose(6,3) + choose(6,4) +
choose(6,5))
R2
R3 = choose(6,3)*(choose(6,1)*(choose(5,1) + choose(5,2) + choose(5,3) +
choose(5,4)) +
choose(6,2)*(choose(4,1) + choose(4,2) + choose(4,3)) +
choose(6,3)*(choose(3,1) + choose(3,2)) +
choose(6,4)*(choose(2,1)))
R3
R2 = choose(6,2)*(choose(6,1) + choose(6,2) + choose(6,3) + choose(6,4) +
choose(6,5))
R2
R3 = choose(6,3)*(choose(6,1)*(choose(5,1) + choose(5,2) + choose(5,3) +
choose(5,4)) +
choose(6,2)*(choose(4,1) + choose(4,2) + choose(4,3)) +
choose(6,3)*(choose(3,1) + choose(3,2)) +
choose(6,4)*(choose(2,1)))
R3
R2*1/6^6
R3*1/6^6
R6 = factorial(6)
R6*1/6^6
?sd
sd(c(5,8,12))
which.min(c(4,1,6))
?which
ls()
seq(0, 10, 2)
d = data.frame(y, x)
x = c(1, 2, 3)
y = c("A", "B", "C")
d = data.frame(y, x)
d
d = d$z
d
d = data.frame(y, x)
d1 = d$z
d1
d = data.frame(y, x)
d$z = c("Yes", "No", "Maybe")
d
u = c(4,5,6)
# Create a sequence with step 2
dbind(d, u)
cbind(d, u)
d = cbind(d, u)
d
d2 = data.frame(c("D", "E"), c(8.1,5.2), c("Ha", "Ha"), c(9, 4))
d2
rbind(d, d2)
d2 = data.frame(y=c("D", "E"), c(8.1,5.2), c("Ha", "Ha"), c(9, 4))
d2
d2 = data.frame(y=c("D", "E"), x=c(8.1,5.2), z=c("Ha", "Ha"), u=c(9, 4))
d2
rbind(d, d2)
d3 = rbind(d, d2)
d3
setwd("~/work/mit15.071x/data")
getwd()
WHO = read.csv("WHO.csv")
i
str(WHO)
summary(WHO)
str(WHO)
WHO[1]
WHO[2]
WHO[3]
WHO
WHO_Europe = subset(WHO, Region == "Europe")
str(WHO_Europe)
write.csv(WHO_Europe, "WHO_Europe.csv")
ls()
rm(WHO_europe)
rm(WHO_Europe)
ls()
summary(WHO)
WHO$Under15
mean(WHO$Under15)
std(WHO$Under)
sd(WHO$Under)
summary(WHO$Under15)
?summary
which.min(WHO$Under15)
WHO[86]
WHO$Country[86]
WHO$Country[x]
WHO$Country[which.max(WHO$Under15)]
plot(WHO$GNI, WHO$FertilityRate)
Outliers = subset(WHO, GNI > 10000 && FertilityRate > 2.5)
Outliers = subset(WHO, GNI > 10000 & FertilityRate > 2.5)
nrow(Outliers)
Outliers[c("Country", "GNI", "FertilityRate")]
mean(WHO$Over60)
summary(WHO$Over60)
which.min(WHO$Over60)
WHO$Country[183]
WHO$Over60[183]
str(WHO)
summary(WHO$LiteracyRate)
which.max(WHO$LiteracyRate)
WHO$Country[44]
data1 = rnorm(100,2,5) # generate 100 values from N(mu, sigma^2) where mu=2, sigma=5
data2 = rbinom(100,12,0.7) #generate 100 values from binomial(12,0.7)
hist(data1, freq=FALSE, breaks=12, col='orange')
x = seq(-15.5, 19.5,.05)  #range of 3.5 sigma around mean
y = dnorm(x,2,5)          #y = f(x) where f = pdf of Norm(2,5)
lines(x,y, col='blue', lwd=2) #add the curve to the current plot
plot(WHO$GNI, WHO$FertilityRate)
hist(WHO$CellularSubscribers)
boxplot(WHO$LifeExpectancy ~ WHO$Region)
?boxplot
boxplot(WHO$LifeExpectancy ~ WHO$Region, xlab="", ylab="Life Expectancy")
boxplot(WHO$LifeExpectancy ~ WHO$Region, xlab="", ylab="Life Expectancy",
main = "Life Expectancy of countries by region")
table(WHO$Region)
tapply(WHO$Over60, WHO$Region, mean)
tapply(WHO$LiteracyRate, WHO$Region, min)
tapply(WHO$LiteracyRate, WHO$Region, min, na.rm=TRUE)
tapply(WHO$ChildMortality, WHO$Region)
tapply(WHO$ChildMortality, WHO$Region, mean)
tapply(WHO$LifeExpectancy, WHO$Region, max)
tapply(WHO$LifeExpectancy, WHO$Region, min)
?boxplot
73-61
61-53
77-73
73-69
x = subset(WHO, LifeExpectancy < 70 & Region == "Eastern Mediterranean")
x[c("Country", "LifeExpectancy")]
x = subset(WHO, LifeExpectancy < 70 & Region == "Americas")
x[c("Country", "LifeExpectancy")]
summary(x$LifeExpectancy)
x = subset(WHO, LifeExpectancy < 70 & Region == "Americas")
summary(x$LifeExpectancy)
x = subset(WHO, Region == "Americas")
x = subset(WHO, Region == "Americas")
summary(x$LifeExpectancy)
77-73.5
73.5-3.5*1.5
usda = read.csv('/home/sergius/work/mit15.071x/data/USDA.csv')
summary(usda)
getwd()
str(usda)
which.min(usda$Sodium)
x=which.min(usda$Sodium)
usda.Description[x]
usda$Description[x]
x=which.max(usda$Sodium)
usda$Description[x]
usda$Sodium
x
names(usda)
hsod = subset(usda, sodium > 10000)
hsod = subset(usda, Sodium > 10000)
hsod
hsod(c"Description")
hsod(c"Description"))
hsod[c"Description")]
hsod[c("Description")]
hsod[c("Description", "Sodium")]
nrow(hsod)
match("CAVIAR", usda$Description)
usda$Sodium[4154]
usda$Sodium(match("CAVIAR", usda$Description))
usda$Sodium[match("CAVIAR", usda$Description)]
summary(usda$Sodium)
sd(usda$Sodium)
sd(usda$Sodium, na.rm=TRUE)
plot(usda$Protein, usda$TotalFat)
plot(usda$Protein, usda$TotalFat, xname="Protein")
plot(usda$Protein, usda$TotalFat, xlab="Protein", ylab="Fat")
plot(usda$Protein, usda$TotalFat, xlab="Protein", ylab="Fat", main="Protein vs. Fat", color=red)
plot(usda$Protein, usda$TotalFat, xlab="Protein", ylab="Fat", main="Protein vs. Fat", color="red)
""
\sad
plot(usda$Protein, usda$TotalFat, xlab="Protein", ylab="Fat", main="Protein vs. Fat", color="red")
plot(usda$Protein, usda$TotalFat, xlab="Protein", ylab="Fat", main="Protein vs. Fat", col="red")
warnings()
plot(usda$Protein, usda$TotalFat, xlab="Protein", ylab="Fat", main="Protein vs. Fat", col="red")
hist(usda$VitaminC, xlab='Vitamin C', main = "Histogram of vitamin C levels")
hist(usda$VitaminC, xlab='Vitamin C', main = "Histogram of vitamin C levels", freq=FALSE)
hist(usda$VitaminC, xlab='Vitamin C', main = "Histogram of vitamin C levels", xlim = c(0, 100))
hist(usda$VitaminC, xlab='Vitamin C', main = "Histogram of vitamin C levels", xlim = c(0, 100), breaks = 100)
hist(usda$VitaminC, xlab='Vitamin C', main = "Histogram of vitamin C levels", xlim = c(0, 100), breaks = 2000)
boxplot(usda$Sugar)
boxplot(usda$Sugar, ylab='Sugar, g')
usda$Sodium[1] > mean(usda$Sodium, na.rm=TRUE)
usda$Sodium[50] > mean(usda$Sodium, na.rm=TRUE)
hsod = usda$Sodium > mean(usda$Sodium, na.rm=TRUE)
str(hsod)
sum(hsod)
hsod = as.numeric(usda$Sodium > mean(usda$Sodium, na.rm=TRUE))
str(hsod)
usda$hsod = as.numeric(usda$Sodium > mean(usda$Sodium, na.rm=TRUE))
str(usda$hsod)
str(usda)
usda$HighProtein = as.numeric(usda$Sodium > mean(usda$Protein, na.rm=TRUE))
str(usda)
usda$HighFat = as.numeric(usda$Sodium > mean(usda$TotalFat, na.rm=TRUE))
usda$HighFat = as.numeric(usda$TotalFat > mean(usda$TotalFat, na.rm=TRUE))
usda$HighProtein = as.numeric(usda$Protein > mean(usda$Protein, na.rm=TRUE))
str(usda)
usda$HighCarbs = as.numeric(usda$Carbohydrate > mean(usda$Carbohydrate, na.rm=TRUE))
str(usda)
table(usda$hsod)
table(usda$hsod, usda$HighFat)
tapply(usda$Iron, usda$HighProtein, mean, na.rm=TRUE)
mvt = read.csv("/home/sergius/work/mit15.071x/data/mvtWeek1.csv")
str(mvt)
max(mvt$ID)
max(mvt$Beat)
min(mvt$Beat)
sum(mvt$Arrest == TRUE)
sum(mvt$Arrest == FALSE)
nrow(mvt$Arrest)
15536+176105
nrow(substr(mvt, LocationDescription == "ALLEY"))
names(mvt)
nrow(subset(mvt, LocationDescription == "ALLEY"))
mvt$Date[5]
DateConvert = as.Date(strptime(mvt$Date, "%m/%d/%y %H:%M"))
summary(DateConvert)
mvt$Month = months(DateConvert)
mvt$Weekday = weekdays(DateConvert)
mvt$Date = DateConvert
table(usda$hsod, usda$HighFat)
tapply(usda$Iron, usda$HighProtein, mean, na.rm=TRUE)
table(mvt$Month)
min(table(mvt$Month))
table(mvt$Weekday)
max(table(mvt$Weekday))
table(mvt$Month, mvt$Arrest)
table(mvt$Month, mvt$Arrest==TRUE)
table(mvt$Month, mvt$Arrest)
hist(mvt$Date, breaks=100)
hist(mvt$Date, freq=TRUE, breaks=100)
boxplot(mvt$Date)
boxplot(mvt$Date, mvt$Arrest)
?boxplot
boxplot(mvt$Date ~ mvt$Arrest)
?table
table(mvt$Date)
mvt$Year = years(mvt$Date)
?Date
mvt$Date[5]
mvt$Date[5] == 2012
mvt$Date[5] == 2012-12-31
mvt$Date[5] == "2012-12-31"
mvt$Date[5] == "2012"
Dare
Date
today = Sys,Date()
today = Sys.Date()
today
table(mvt$Date, mvt$Arrest)
format(mvt$Date[5], %Y)
format(mvt$Date[5], "%y")
format(mvt$Date[5], "%Y")
table(format(mvt$Date, "%Y", mvt$Arrest)
)
table(format(mvt$Date), "%Y", mvt$Arrest)
table(format(mvt$Date, "%Y"), mvt$Arrest)
550/13542
2152/18517
2152/(18517+2152)
table(format(mvt$Date, "%Y"), mvt$Arrest)[1]
table(format(mvt$Date, "%Y"), mvt$Arrest)[1,1]
table(format(mvt$Date, "%Y"), mvt$Arrest)[1,2]
table(format(mvt$Date, "%Y"), mvt$Arrest)[:,2]
table(format(mvt$Date, "%Y"), mvt$Arrest)[,2]
x=table(format(mvt$Date, "%Y"), mvt$Arrest)
x[,1]
x[,1]/x[,2]
x[,1]/(x[,2]+x[,1])
x[,2]/(x[,2]+x[,1])
table(mvt$LocationDescription)
sort(table(mvt$LocationDescription))
top5 = subset(mvt, LocationDescription == STREET)
top5 = subset(mvt, LocationDescription == "STREET")
top5 = subset(mvt, LocationDescription == "STREET" | LocationDescription == "PARKING LOT/GARAGE(NON.RESID.)" | LocationDescription == "ALLEY" | LocationDescription == "GAS STATION" | LocationDescription == "DRIVEWAY - RESIDENTIAL")
table(top5$LocationDescription)
sort(table(top5$LocationDescription))
str(top5)
top5$LocationDescription = factor(top5$LocationDescription)
str(top5)
sort(table(top5$LocationDescription))
x=table(top5$LocationDescription)
x[,1]
x[,]
x
x=table(top5$LocationDescription, top5$Arrest)
x
x[,1]/(x[,1]+x[,2])
x[,2]/(x[,1]+x[,2])
y=subset(top5, LocationDescription="GAS STATION")
str(y)
table(y$Weekday)
table(y$LocationDescription)
y=subset(top5, LocationDescription=="GAS STATION")
table(y$LocationDescription)
table(y$Weekday)
max(table(y$Weekday))
which.max(table(y$Weekday))
y=subset(top5, LocationDescription=="DRIVEWAY - RESIDENTIAL")
table(y$LocationDescription)
table(y$Weekday)
which.min(table(y$Weekday))
pwd()
getcw()
setwd
setwd()
setwd("/home/sergius/work/mit15.071x/data/")
IBM = read.csv("IBMStock.csv")
Boeing = read.csv("BoeingStock.csv")
ProcterGamble = read.csv("ProcterGambleStock.csv")
GE = read.csv("GE.csv")
CocaCola = read.csv("CocaCola.csv")
GE = read.csv("GEStock.csv")
CocaCola = read.csv("CocaColaStock.csv")
ProcterGamble = read.csv("ProcterGambleStock.csv")
Boeing = read.csv("BoeingStock.csv")
IBM = read.csv("IBMStock.csv")
str(IBM)
?for
)
for x in [IBM, Boeing, ProcterGamble, GE, CocaCola]
str(x)
for (x in [IBM, Boeing, ProcterGamble, GE, CocaCola]) {
str(x)
}
for (x in [IBM, Boeing, ProcterGamble, GE, CocaCola]) {
str(x)
for (x in [IBM, Boeing, ProcterGamble, GE, CocaCola]) {
str(x)
}
for (x in [IBM, Boeing, ProcterGamble, GE, CocaCola]) {
for (x in [IBM, Boeing, ProcterGamble, GE, CocaCola]) { str(x) }
for (x in c(IBM, Boeing, ProcterGamble, GE, CocaCola) { str(x) }
for (x in c(IBM, Boeing, ProcterGamble, GE, CocaCola)) { str(x) }
for (x in c(IBM, Boeing, ProcterGamble, GE, CocaCola)) {
str(x)
}
str(IBM)
str(x)
for (i in c(IBM, Boeing, ProcterGamble, GE, CocaCola)) {
str(i)
}
str(i)
str(c(IBM, Boeing)[1])
for (i in c(IBM, Boeing, ProcterGamble, GE, CocaCola)) {
names(i)
}
IBM$Date = as.Date(IBM$Date, "%m/%d/%y")
Boeing$Date = as.Date(Boeing$Date, "%m/%d/%y")
ProcterGamble$Date = as.Date(ProcterGamble$Date, "%m/%d/%y")
GE$Date = as.Date(GE$Date, "%m/%d/%y")
CocaCola$Date = as.Date(CocaCola$Date, "%m/%d/%y")
str(IBM)
str(GE)
summary(IBM)
summary(GE)
summary(IBM)
summary(GE)
summary(CocaCola)
summary(Boeing)
sd(ProcterGamble$StockPrice)
plot(CocaCola$Date, CocaCola$StockPrice, col="green")
plot(CocaCola$Date, CocaCola$StockPrice, col="green", type='l')
plot(ProcterGamble$Date, ProcterGamble$StockPrice, col="red", type='l')
line(CocaCola$Date, CocaCola$StockPrice, col="green", type='l')
lines(CocaCola$Date, CocaCola$StockPrice, col="green", type='l')
plot(CocaCola$Date, CocaCola$StockPrice, col="green", type='l')
plot(CocaCola$Date, CocaCola$StockPrice, col="red", type='l')
lines(CocaCola$Date, CocaCola$StockPrice, col="blue", type='l')
plot(CocaCola$Date, CocaCola$StockPrice, col="red", type='l')
lines(ProcterGamble$Date, ProcterGamble$StockPrice, col="blue", type='l')
abline(v=as.Date("2000-03-01"), lwd=2)
plot(CocaCola$Date, CocaCola$StockPrice, col="red", type='l', xlab="date", ylab="Coca Cola")
lines(ProcterGamble$Date, ProcterGamble$StockPrice, col="blue", type='l', ylab="P&G")
plot(CocaCola$Date, CocaCola$StockPrice, col="red", type='l', xlab="date", ylab="Coca Cola (red), P&G (blue)")
lines(ProcterGamble$Date, ProcterGamble$StockPrice, col="blue", type='l', ylab="P&G")
abline(v=as.Date("1983-01-01"), lwd=2)
plot(CocaCola$Date[301:432], CocaCola$StockPrice[301:432], type='l',
col='red', ylim=c(0,210))
plot(CocaCola$Date[301:432], CocaCola$StockPrice[301:432], type='l',
col='red', ylim=c(0,210), ylab='CocaCola (red), P&G (blue),
GE (purple), Boeing (orange), IBM(green)')
plot(CocaCola$Date[301:432], CocaCola$StockPrice[301:432], type='l',
col='red', ylim=c(0,210), main='CocaCola (red), P&G (blue),
GE (purple), Boeing (orange), IBM(green)')
plot(CocaCola$Date[301:432], CocaCola$StockPrice[301:432], type='l',
col='red', ylim=c(0,210), ylab = 'Stock Price', main='CocaCola (red), P&G (blue),
GE (purple), Boeing (orange), IBM(green)')
lines(ProcterGamble$Date[301:432], ProcterGamble$StockPrice[301:432], type='l',
col='blue')
lines(GE$Date[301:432], GE$StockPrice[301:432],
type='l', col='purple')
lines(Boeing$Date[301:432], Boeing$StockPrice[301:432],
type='l', col='orange')
lines(IBM$Date[301:432], IBM$StockPrice[301:432],
type='l', col='green')
abline(v=as.Date("2000-03-01"))
abline(v=as.Date("2000-03-01"), lty=1)
abline(v=as.Date("2000-03-01"), lty=2)
abline(v=as.Date("1997-11-01"), lty=2)
abline(v=as.Date("1997-09-01"), lty=2)
tapply(IBM$StockPrice, months(IBM$Date), mean)
mean(IBM$StockPrice)
tapply(IBM$StockPrice, months(IBM$Date), mean) > 144.375
sort(tapply(IBM$StockPrice, months(IBM$Date), mean) > 144.375)
tapply(CocaCola$StockPrice, months(CocaCola$Date), mean)
tapply(GE$StockPrice, months(GE$Date), mean)
setwd("~/work/mit15.071x/data/CPS")
CPS = read.csv("CPSData.csv")
str(CPS)
table(CPS$Industry)
sort(table(CPS$Industry))
sort(table(CPS$Region))
sort(table(CPS$State))
table(CPS$Citizenship)
table(CPS$Citizenship)/nrow
table(CPS$Citizenship)/nrow(CPS)
0.888+0.0538
table(CPS$Hispanic, CPS$Race)
names(CPS)
summary(CPS)
table(CPS$Region, is.na(CPS$Married))
table(CPS$Sex, is.na(CPS$Married))
table(CPS$Age, is.na(CPS$Married))
table(CPS$Citizenship, is.na(CPS$Married))
table(CPS$State, CPS$MetroAreaCode)
table(CPS$State, is.na(CPS$MetroAreaCode)
)
table(CPS$Region, is.na(CPS$MetroAreaCode))
table(CPS$Region, is.na(CPS$MetroAreaCode))/table(CPS$Region)
x=table(CPS$Region, is.na(CPS$MetroAreaCode))
table(CPS$Region)
y=table(CPS$Region)
x/y
x[,2]
x[,2]/y
tapply(CPS$MetroAreaCode, CPS$State, mean)
tapply(is.na(CPS$MetroAreaCode), CPS$State, mean)
sort(tapply(is.na(CPS$MetroAreaCode), CPS$State, mean))
MetroAreaMap = read.csv("MetroAreaCodes.csv")
CountryMap = read.csv("CountryCodes")
CountryMap = read.csv("CountryCodes.csv")
str(MetroAreaMap)
str(CountryMap)
CPS = merge(CPS, MetroAreaMap, by.x="MetroAreaCode", by.y="Code",
all.x=TRUE)
names(CPS)
summary(CPS)
table(CPS$MetroArea)
which.max(table(CPS$MetroArea))
max(table(CPS$MetroArea))
max(table(CPS$MetroArea), 5409)
sort(table(CPS$MetroArea))
table(CPS$MetroArea)
tapply(CPS$Hispanic, CPS$MetroArea, mean)
sort(tapply(CPS$Hispanic, CPS$MetroArea, mean))
CPS$Hispanic[4]
CPS$Hispanic[40]
CPS$Hispanic[400]
CPS$Hispanic[4000]
CPS$Hispanic[3000]
CPS$Hispanic[3030]
summary(CPS$Hispanic)
summary(CPS)
sort(tapply(CPS$Hispanic, CPS$MetroArea, mean))\
sort(tapply(CPS$Hispanic, CPS$MetroArea, mean))
sort(table(CPS$Hispanic, CPS$MetroArea))
table(CPS$Hispanic==1, CPS$MetroArea)
sort(tapply(CPS$Hispanic==1, CPS$MetroArea, mean))
sort(tapply(CPS$Race=="Asian", CPS$MetroArea, mean))
sort(tapply(CPS$Education=="No high school diploma", CPS$MetroArea, mean, rm.na=TRUE))
sort(tapply(CPS$Education=="No high school diploma", CPS$MetroArea, mean, na.rm=TRUE))
sort(tapply(CPS$Education=="No high school diploma", CPS$MetroArea, mean, na.rm=TRUE))
names(CPS)
names(CountryMap)
CPS = merge(CPS, CountryMap, by.x="CountryOfBirthCode", by.y="Code", all.x=TRUE)
names(CPS)
summary(CPS)
table(CPS$Country)
sort(table(CPS$Country))
sort(tapply(CPS$Country="United States", CPS$MetroArea, mean, na.rm=TRUE))
sort(tapply(CPS$Country=="United States", CPS$MetroArea, mean, na.rm=TRUE))
tapply(CPS$Country=="United States", CPS$MetroArea, mean, na.rm=TRUE)
tapply(CPS$Country!="United States", CPS$MetroArea, mean, na.rm=TRUE)
tapply(CPS$Country=="India", CPS$MetroArea, sum, na.rm=TRUE)
sort(tapply(CPS$Country=="India", CPS$MetroArea, sum, na.rm=TRUE))
sort(tapply(CPS$Country=="Brazil", CPS$MetroArea, sum, na.rm=TRUE))
sort(tapply(CPS$Country=="Somalia", CPS$MetroArea, sum, na.rm=TRUE))
